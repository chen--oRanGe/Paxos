内容：
1.完成的功能
2.编译安装
3.运行演示步骤
4.代码注释及说明
5.需要改进的地方
-----------------------------------------------------------------------------
***      完成的功能                                     ***
-----------------------------------------------------------------------------
代码实现了基本的Paxos协议，本代码支持2个learner，3个accepter，和多个proposer，可以在Acceptor failure，redundant Learner failure，Proposer failure，dueling Proposers情况下正常运行，不会出现问题。
-----------------------------------------------------------------------------
***      编译安装                                    ***
-----------------------------------------------------------------------------
解压缩文件，命令行下运行make，完成编译。
-----------------------------------------------------------------------------
***      运行演示                                    ***
-----------------------------------------------------------------------------
1）在多个窗口分别按顺序运行./learner1，./learner2,./accepter1,./accepter2,./accepter3,./proposer,./proposer
2)消息编码格式：
第一位为消息类型，0表示申请promise id，1表示申请发送消息。
第三位为序号位可以从0到9，第三位后为发送消息。
3）正常情况演示：
    （1）proposer发送0_1，表示申请发送，promise id 为1
    （2）proposer收到accepter确认，发送1_1message表示以1为序号发送message
    （3）learner1和learner2收到message
4）Accepter failure演示
    （1）proposer发送0_2，表示申请发送，promise id 为2
    （2）在任意一个accepter中用Ctrl+c结束进程
    （3）proposer收到accepter确认，发送1_2message表示以2为序号发送message
    （4）learner1和learner2收到message
5）redundant Learner failure演示
    （1）proposer发送0_3，表示申请发送，promise id 为3
    （2）在learner1中用Ctrl+c结束进程
    （3）proposer收到accepter确认，发送1_3message表示以3为序号发送message
    （4）learner2收到message
6）dueling Proposers
    （1）在一个proposer中发送0_4,表示申请发送，promise id 为4 
    （2）在另一个proposer中发送0_5,表示申请发送，promise id 为5 
    （3）第一个proposer收到accepter确认，发送1_4message1表示以4为序号发送message1
    （3）第二个proposer收到accepter确认，发送1_5message2表示以5为序号发送message2
    （4）learner1和learn2收到message2
7）failure of proposer
    （1）在一个窗口的proposer中用Ctrl+c结束进程
    （2）proposer发送0_6，表示申请发送，promise id 为6
    （3）proposer收到accepter确认，发送1_6message表示以6为序号发送message
    （4）learner1和learner2收到message
-----------------------------------------------------------------------------
***      代码注释及说明                                   ***
-----------------------------------------------------------------------------
1)proposer
    10~121行     建立和两个learner和三个accepter的连接，采用基于tcp的socket连接实现进程间的通信。
    124~144行    向accepter发送申请promise命令，在向每个accepter发送消息的时候新建立一个进程进行通信，可以避免由与accepter失败而造成的proposer崩溃。
    145~154行    从accepter接收返回信息，如果接收到的同意请求大于半数，准备发送消息，否则发送下一个申请。
    155~174行    多进程向accepter发送accept request。
    176~200行    如果收到的accept 大于半数，向learner发送消息
2）accepter
    90~102行     建立socket连接并绑定到端口。
    104~118行    监听端口，当有消息发送时建立多线程来处理消息。
    51~63行      处理promise请求，如果promise id大于当前最大序号发送confirm，否则发送reject
    65~78行      处理accept请求，如果当前发送id和最大id相等发送confirm，否则发送reject
3)learner
    接收proposer发送过来的消息
-----------------------------------------------------------------------------
***      需要改进的地方                                     ***
-----------------------------------------------------------------------------
1）accepter和learner的断口号都是硬编码进去的，所以数量目前也都是固定的，理想情况应该是指定一个配置文件来动态指定IP地址和端口号。
2）proposer中对socket的初始化是每个单独进行的，代码重复量十分大，可以考虑建立一个socket_fd数组利用循环的方式给socket赋值并进行连接。
3）由于每次读socket都是新建立了一个进程来读取所以把一些网络错误给屏蔽了，但是也就无法检测出哪里出错了。
4）由于把给learner发送消息的任务还给proposer来处理了，这样learner端就不需要什么多余的处理了，可能问题就是accepter通过了proposer发送的消息但是proposer在这个时候挂掉了，消息就还是发送不出去。

